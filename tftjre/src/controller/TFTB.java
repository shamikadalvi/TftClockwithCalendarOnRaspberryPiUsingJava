package controller;



import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Scanner;
import java.util.concurrent.TimeUnit;

import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;

import com.pi4j.Pi4J;
import com.pi4j.context.Context;
import com.pi4j.io.gpio.digital.DigitalOutput;
import com.pi4j.io.gpio.digital.DigitalOutputConfigBuilder;
import com.pi4j.io.gpio.digital.DigitalState;
import com.pi4j.util.Console;








public class TFTB 


{

	public static int WIDTH = 480;
	public static int HEIGHT = 320;
    static boolean flagset;	
    
	
	public static int  _lcd_xor, _lcd_capable;
	public static int  _lcd_rev, _lcd_madctl, _lcd_drivOut, _MC, _MP, _MW, _SC, _EC, _SP, _EP;
	public static int _width;     
	public static int _height;  
	public static int rotation;
	
	
	

	public static int  BLACK   = 0;  // 0x0000
	public static int  BLUE    = 31;  //0x001F
	public static int  RED     = 63488;   //0xF800
	public static int  GREEN   = 2016;  //0x07E0
	public static int  CYAN    = 2047;  //0x07FF
	public static int  MAGENTA = 63519; //0xF81F
	public static int  YELLOW  = 65504; //0xFFE0 
	public static int  WHITE   = 65535; //0xFFFF
	
	
	
	public static int  MIPI_DCS_REV1 = (1<<0);
	public static int  AUTO_READINC =  (1<<1);
	public static int  READ_BGR =      (1<<2);
	public static int  READ_LOWHIGH =  (1<<3);
	public static int  READ_24BITS =    (1<<4);
	public static int  XSA_XEA_16BIT =  (1<<5);
	public static int  READ_NODUMMY =   (1<<6);
	public static int  INVERT_GS =      (1<<8);
	public static int  INVERT_SS =      (1<<9);
	public static int  MV_AXIS =        (1<<10);
	public static int  INVERT_RGB =     (1<<11);
	public static int  REV_SCREEN =     (1<<12);
	public static int  FLIP_VERT =      (1<<13);
	public static int  FLIP_HORIZ =     (1<<14);

	
	static String finaltemp="";
	static String finalhumidity="";
	static  String desc="";
	
	
	static String date;
	static String day;
	static String month;
	static String year;
	static String hour;
	static String min;
	static String amorpm;
	

	
	
	
	public static final int D7_pin= 9; 
	public static final int D6_pin = 11; 
	public static final int D5_pin = 0; 
	public static final int D4_pin = 5; 
	public static final int D3_pin = 6; 
	public static final int D2_pin = 13; 
	public static final int D1_pin = 19; 
	public static final int D0_pin = 26; 
	
	
	
	
	public static final int RD_edit_pin= 22; 
	public static final int WR_edit_pin =27 ; 
	public static final int CD_edit_pin = 23; 
	public static final int CS_edit_pin = 1; 
	public static final int RESET_edit_pin =12 ;
	
	

	 Console console = new Console(); 
	  static Context pi4j = Pi4J.newAutoContext();
	
	
	 
	 
	 
	  static DigitalOutputConfigBuilder  ledD7 = DigitalOutput.newConfigBuilder(pi4j)
            .id("ledD7")
            .name("LED Flasher")
            .address(D7_pin)
            .shutdown(DigitalState.LOW)
            .initial(DigitalState.LOW)
            .provider("pigpio-digital-output");
	  static    DigitalOutput D7 = pi4j.create(ledD7);
	
	 
         
         static DigitalOutputConfigBuilder ledD6 = DigitalOutput.newConfigBuilder(pi4j)
                 .id("ledD6")
                 .name("LED Flasher")
                 .address(D6_pin)
                 .shutdown(DigitalState.LOW)
                 .initial(DigitalState.LOW)
                 .provider("pigpio-digital-output");
         static    DigitalOutput D6 = pi4j.create(ledD6); 
         
         
         
         
              
              
              
              static DigitalOutputConfigBuilder ledD5 = DigitalOutput.newConfigBuilder(pi4j)
                      .id("ledD5")
                      .name("LED Flasher")
                      .address(D5_pin)
                      .shutdown(DigitalState.LOW)
                      .initial(DigitalState.LOW)
                      .provider("pigpio-digital-output");
              static   DigitalOutput D5 = pi4j.create(ledD5); 
              
              
              
              
              
                   static DigitalOutputConfigBuilder ledD4 = DigitalOutput.newConfigBuilder(pi4j)
                           .id("ledD4")
                           .name("LED Flasher")
                           .address(D4_pin)
                           .shutdown(DigitalState.LOW)
                           .initial(DigitalState.LOW)
                           .provider("pigpio-digital-output");
                   static     DigitalOutput D4 = pi4j.create(ledD4); 
                   
              
              

                        static DigitalOutputConfigBuilder ledD3 = DigitalOutput.newConfigBuilder(pi4j)
                                .id("ledD3")
                                .name("LED Flasher")
                                .address(D3_pin)
                                .shutdown(DigitalState.LOW)
                                .initial(DigitalState.LOW)
                                .provider("pigpio-digital-output");
                        static       DigitalOutput D3 = pi4j.create(ledD3); 
                             
                             
                             
                             
                             static DigitalOutputConfigBuilder ledD2 = DigitalOutput.newConfigBuilder(pi4j)
                                     .id("ledD2")
                                     .name("LED Flasher")
                                     .address(D2_pin)
                                     .shutdown(DigitalState.LOW)
                                     .initial(DigitalState.LOW)
                                     .provider("pigpio-digital-output");
                             static          DigitalOutput D2 = pi4j.create(ledD2);       
                             
                             
                             
                             
                                  static DigitalOutputConfigBuilder ledD1 = DigitalOutput.newConfigBuilder(pi4j)
                                          .id("ledD1")
                                          .name("LED Flasher")
                                          .address(D1_pin)
                                          .shutdown(DigitalState.LOW)
                                          .initial(DigitalState.LOW)
                                          .provider("pigpio-digital-output");
                                  static       DigitalOutput D1 = pi4j.create(ledD1); 
                             
                             
                             
                             
                             
                                       static DigitalOutputConfigBuilder ledD0 = DigitalOutput.newConfigBuilder(pi4j)
                                               .id("ledD0")
                                               .name("LED Flasher")
                                               .address(D0_pin)
                                               .shutdown(DigitalState.LOW)
                                               .initial(DigitalState.LOW)
                                               .provider("pigpio-digital-output");
                                       static             DigitalOutput D0 = pi4j.create(ledD0); 
	 
	 
	 
	                                          
                                            
                                            
                            static DigitalOutputConfigBuilder ledRD_edit = DigitalOutput.newConfigBuilder(pi4j)
                             .id("ledRD_edit")
                             .name("LED Flasher")
                              .address(RD_edit_pin)
                              .shutdown(DigitalState.LOW)
                               .initial(DigitalState.LOW)
                               .provider("pigpio-digital-output");
                                static DigitalOutput RD_edit = pi4j.create(ledRD_edit); 
     	                                      
                              
                                
                                
                                
                                static DigitalOutputConfigBuilder ledWR_edit = DigitalOutput.newConfigBuilder(pi4j)
                                        .id("ledWR_edit")
                                        .name("LED Flasher")
                                         .address(WR_edit_pin)
                                         .shutdown(DigitalState.LOW)
                                          .initial(DigitalState.LOW)
                                          .provider("pigpio-digital-output");
                                        static   DigitalOutput WR_edit = pi4j.create(ledWR_edit);    
                                           
                                           
                                           
                                           
                                           static DigitalOutputConfigBuilder ledCD_edit = DigitalOutput.newConfigBuilder(pi4j)
                                                   .id("ledCD_edit")
                                                   .name("LED Flasher")
                                                    .address(CD_edit_pin)
                                                    .shutdown(DigitalState.LOW)
                                                     .initial(DigitalState.LOW)
                                                     .provider("pigpio-digital-output");
                                           static     DigitalOutput CD_edit = pi4j.create(ledCD_edit);               
                                           
                                           
                                           
                                           
                                                      
                                                      static DigitalOutputConfigBuilder ledCS_edit = DigitalOutput.newConfigBuilder(pi4j)
                                                              .id("ledCS_edit")
                                                              .name("LED Flasher")
                                                               .address(CS_edit_pin)
                                                               .shutdown(DigitalState.LOW)
                                                                .initial(DigitalState.LOW)
                                                                .provider("pigpio-digital-output");
                                                      static        DigitalOutput CS_edit = pi4j.create(ledCS_edit);    
                                                                 
                                                                            
                                                                 static DigitalOutputConfigBuilder ledRESET_edit = DigitalOutput.newConfigBuilder(pi4j)
                                                                         .id("ledRESET_edit")
                                                                         .name("LED Flasher")
                                                                          .address(RESET_edit_pin)
                                                                          .shutdown(DigitalState.LOW)
                                                                           .initial(DigitalState.LOW)
                                                                           .provider("pigpio-digital-output");
                                                                 static           DigitalOutput RESET_edit = pi4j.create(ledRESET_edit);  
                                           
                                           
                                           
                                           
                                           
                                           
                                           
                                           
                                
                                
                                
                                
                                
                                
               
                                            
                                            
                                            
                                            
                                            
                                            
                                            
                                            
                                            
                                            
                                            
                                            
	
	 static int  drawmins[] =
			  
			  
		  {

				  38026,38026,38026,40074,40074,40074,40074,40074,38026,40074,40074,40074,40074,40074,40074,40074,40074,40074,40074,37994,40042,40042,40074,40074,40074,40074,40074,38026,38026,38026,38026,37994,37994,40042,40042,40042,40042,40042,37962,40042,40042,40042,37994,37994,37994,37994,40042,40042,40042,40042,40042,37994,40042,37993,37993,40041,40041,37993,40041,40041,
				  38026,38026,38026,40074,40074,40074,40074,40074,40074,40074,38026,40074,40074,40074,40074,40042,40074,40074,40074,40042,40074,40074,40042,37994,37994,37994,40074,38026,38026,38026,37994,37994,37994,40042,40042,40042,40042,37962,37994,37993,37993,40042,40042,40042,40042,40042,37994,40042,40042,37993,37993,40042,40042,40041,40041,40041,40041,40041,40041,40041,
				  40075,40075,40075,40074,40074,40074,37994,40074,40074,38026,37994,40074,40074,40074,37994,40074,40074,40042,40042,40074,40074,40074,40074,38026,38026,38026,38026,37994,37994,37994,37994,37994,37994,40042,37962,37962,37962,37994,37994,37962,37962,40042,40042,40042,40042,40042,40042,40042,40042,40042,37962,40042,40042,40042,40042,40041,37993,37993,37993,40041,
				  38026,38026,40074,40074,40074,37994,38026,40074,40074,40074,37994,37994,40074,40074,37994,37994,40074,40074,40042,40074,40074,37994,37994,38026,38026,38026,37994,37994,37994,37994,37994,37994,37994,37961,37962,37994,37994,37994,37994,37994,37962,37993,40042,37961,37961,37993,37993,40042,40042,37994,37994,37993,40042,37994,37994,37993,37993,37993,40041,40009,
				  38027,38027,38027,37994,37994,40074,40074,40074,38026,40074,40074,38026,38026,40074,40074,40074,37994,40042,40074,40042,40042,40074,40042,37994,37994,37994,37994,40074,38026,37994,37994,40042,40042,40042,40042,37962,37962,37962,37994,37994,40042,40042,37962,37962,37994,40042,40042,37961,37961,37961,37994,37994,40042,40042,40042,37994,37994,40041,40042,40041,
				  38027,38026,38027,40074,40074,40074,40074,40074,40074,37994,37994,37994,37994,37994,37994,37994,40042,40042,40042,40042,40042,37994,40042,38026,37994,37994,37994,38026,37994,37994,37994,37994,37994,37962,37962,40042,37962,37994,37962,37961,37994,40042,37961,37961,37961,37994,37994,37961,37961,37961,37961,37961,37961,37993,37993,37961,37961,37961,37993,40041,
				  38027,38027,37994,40075,40075,40074,40074,40042,40042,38026,38026,38026,38026,38026,38026,40042,37994,40042,40042,40042,40042,40042,40042,38026,38026,37994,37994,37994,37994,37994,37994,37994,37994,37962,37962,37962,37962,37994,40042,37962,37962,37962,37962,37962,37962,37961,37961,37994,37962,37962,37962,37961,37962,37962,37962,37993,37961,37993,37994,37961,
				  37994,38026,38026,37994,40075,37994,37994,40074,40074,38026,38026,40074,38026,38026,37994,40042,40074,40042,40042,40042,40042,37994,40042,38026,38026,37994,37994,37994,37994,37994,37994,37994,37994,40042,40042,37962,37962,37962,37994,37962,37962,37994,37994,37961,37961,37961,37961,37962,37962,37962,37962,37961,37961,37994,37994,37993,37993,37993,37994,37994,
				  38027,37995,37995,40075,37994,37994,37994,40074,40074,40074,37994,37994,37994,37994,37994,37994,37994,37994,37962,40042,40042,40074,40042,37994,37994,37994,37994,37994,37962,37962,37994,37994,37994,40042,37962,37962,37930,37962,37962,37962,37962,37962,37994,37962,37962,37962,37962,37962,37962,37962,37962,37962,37962,37961,37961,37962,37962,37993,37961,37962,
				  38027,38027,38027,37994,37994,37994,37994,40074,40074,40074,37994,37994,37994,37994,37994,37994,40042,40042,37962,40042,40042,40074,40042,37994,37994,37994,37994,37994,37994,37994,37994,37962,37962,37962,37962,37962,37962,37962,37962,37962,37929,37962,37962,37962,37962,37962,37962,37962,37961,37961,37962,37962,37962,37962,37962,37962,37994,37993,37993,37994,
				  37995,37995,37995,37994,37994,37994,37994,37994,40074,37994,37994,37994,37994,37994,37994,37994,40042,40042,40042,40042,40042,40042,37994,37994,37994,37994,37994,37994,37994,37994,37994,37994,37994,37962,37962,40042,37962,37962,37962,37962,37929,37961,37961,37962,37962,37961,37929,37929,37961,37962,37962,37962,37962,37961,37962,37961,37994,37993,37993,37961,
				  37994,37994,37994,40075,37994,37994,37994,37994,37994,37994,37994,37962,37994,37994,37994,37962,37994,40042,40042,40042,40042,37994,37994,37994,37994,37994,37962,37962,37962,37962,37994,37994,37962,37962,37962,37962,37929,37930,37962,37962,37961,37962,37961,40042,37994,37961,37961,37961,37962,37962,37962,37961,37929,37929,37961,37962,37961,37961,37961,37961,
				  37995,37995,40075,37995,37995,40075,40075,37994,37994,37994,37994,37995,37994,37994,37994,37994,37962,37994,37994,40074,40042,37994,37994,37994,37994,37994,38026,37994,37994,37994,37962,37962,37994,40042,40042,37962,37962,37962,37930,37930,37930,37930,37930,37930,37962,37930,37962,37930,37930,37929,37929,37930,37962,37962,37962,37962,37961,37961,37962,37962,
				  37995,37995,37995,37995,37995,40075,40075,37994,37994,37994,37994,37994,37994,37962,37962,37962,37962,37994,37994,40042,37994,37994,37994,37994,37994,37994,37994,37994,37994,37994,37994,37994,37994,37962,37962,37962,37962,37962,37930,37962,37962,37962,37962,37962,37962,37962,37962,37962,37962,37930,37930,37930,37962,37962,37962,37930,37930,37930,37962,37929,
				  37995,37995,37995,37995,37994,37994,37994,37994,37994,37994,37994,37994,37994,37994,37994,37994,37994,37994,37994,37994,37994,37994,37994,37994,37962,37962,37962,37994,37994,37994,37994,37994,37962,37962,37930,37962,37962,37962,37962,37962,37962,37962,37962,37929,37929,37929,37929,37929,37929,37930,37930,37930,37930,37930,37962,37962,37962,37962,37930,37961,
				  37995,37994,37962,37995,37995,37994,37994,37994,37994,37994,37994,37994,37994,37994,37994,37994,37994,37994,37994,37994,37994,37994,37994,37962,37994,37994,37994,37994,37994,37994,37994,37962,37962,37962,37962,37962,37962,37930,37962,37962,37962,37962,37962,37962,37962,37930,37930,37930,37930,37930,37962,37962,37930,37929,37929,37930,37962,37930,37930,37961,
				  37995,37962,37962,37994,37994,37994,37994,37994,37994,37994,37994,37994,37994,37994,37994,37962,37962,37962,37962,37962,37962,37994,37962,37994,37994,37994,37962,37994,37962,37994,37962,37962,37962,37962,37962,37962,37962,37962,37930,37962,37930,37930,37930,37962,37930,37930,37929,37929,37930,37929,37930,37930,37929,37930,37930,37962,37962,37962,37929,35881,
				  37995,37994,37962,37994,37994,37994,37962,37994,37994,37994,37994,37994,37994,37994,37994,37994,37962,37962,37962,37994,37994,37962,37962,37962,37994,37994,37994,37994,37994,37962,37994,37962,37962,37930,37962,37962,37962,37962,37962,37962,37930,37929,37929,37929,37897,37897,37897,35849,37929,37929,37929,37929,37929,37929,37929,37929,37929,37929,37930,35881,
				  37962,37994,37962,37962,37962,37962,37994,37994,37994,37962,37994,37994,37994,37994,37994,37994,37994,37994,37994,37994,37994,37994,37994,37994,37994,37994,37994,37962,37962,37962,37962,37962,37962,37930,37930,37962,37930,37962,37962,37962,37930,37930,37930,37930,37930,37930,37930,37930,37962,37962,37962,35882,35882,37930,37930,37930,37930,35882,35881,37961,
				  37994,37994,37994,37962,35914,37962,37994,37994,37994,37962,37962,37962,37962,37962,37962,37994,37962,37994,37994,37962,37994,37962,37994,37994,37994,37962,37962,37994,37962,37962,37962,37962,37962,37962,37962,37930,37930,37962,37962,37930,37930,37930,37930,35850,35849,37930,37930,37930,37930,35849,37898,35882,37930,37930,37930,37930,37930,37930,37930,35881,
				  37962,37994,37962,35914,37994,37994,37962,35914,37994,37994,37994,37994,37962,37962,37962,37994,37994,37962,37962,37962,37962,37994,37994,37994,37962,37962,37962,37962,37962,37930,37930,37930,37930,37962,37962,37962,37962,37962,37962,37962,37962,37930,35881,37930,37930,37930,37930,37930,37930,37930,35882,35849,37930,37930,37930,37962,35882,35881,35881,37930,
				  37994,37994,37962,35914,37994,37995,37962,35914,37994,37994,37994,37962,35914,35914,35914,37962,37962,37962,37962,37994,37994,37962,37962,37962,37962,37962,37962,37962,37962,37962,37962,37962,37962,37962,37962,37962,37930,37930,37930,37962,37930,37930,35881,37930,37930,37930,37930,35882,37930,37930,35882,35882,37930,37930,37930,35882,35882,35882,35882,35881,
				  37963,37962,37962,35914,37994,37995,35946,37994,35914,35946,35914,37962,37962,35914,37962,37962,37962,37962,37994,37962,37962,37994,37962,37962,37962,37962,37962,37962,37962,37930,37962,37962,37962,37962,37962,37930,37962,37962,37962,37930,37962,35882,35882,37930,37930,37930,37930,37930,37930,35882,35850,35850,35882,35882,35882,35882,35882,35882,35881,35881,
				  37962,35914,35914,37962,37962,37994,37994,35914,37994,35914,35914,37994,37962,37962,37962,37962,37962,37962,37962,37962,37962,37994,37995,37995,37962,37962,37962,37930,37930,37930,37930,37930,37930,37930,37962,37962,37962,37962,37962,37962,37962,37930,35882,37930,37930,37930,35850,35850,35850,35850,35849,35882,35849,35849,35849,35849,35849,35849,35849,35881,
				  37995,37962,35914,37962,37962,37994,37994,35914,35914,35914,35914,37962,35914,35914,35914,35914,35914,35914,35914,37995,37962,37962,37962,37930,37962,37962,37962,37962,37962,37962,37962,37962,37962,37962,37962,37962,37962,37930,37930,37930,37930,35882,35882,35850,35882,35882,35882,35882,35882,35849,35849,35882,35849,35849,35849,35849,35849,35881,35849,35849,
				  37995,37963,35914,37962,37962,35914,35914,35914,35914,35914,35914,35914,35882,35914,35914,35914,35914,35914,37962,37962,37962,37962,37962,37962,37962,37962,37962,37962,37962,37962,37962,37962,37962,37962,37962,37962,37930,37930,37930,35882,35882,35882,35882,35882,35850,35849,35850,35849,35849,35849,35849,35849,35849,35849,35849,35849,35849,35849,35849,35849,
				  37962,35914,35914,35914,35914,35914,35914,35914,35914,35914,35914,35914,37962,37930,37962,35914,35914,37962,37962,35882,37962,37962,37994,37962,37962,37930,37930,37930,37930,37930,37930,37930,37930,37929,37929,37930,37962,35914,35882,35882,35882,35882,35882,35849,35849,35882,35882,35882,35849,35849,35882,35849,35849,35849,35849,35849,35849,35849,33801,35849,
				  37962,37963,37962,37962,35914,35914,35914,35914,35914,35914,35914,35914,37962,37930,37930,35882,35882,37930,37962,35882,35882,37930,37930,37930,37930,37962,37962,37930,37962,37962,37962,37962,37962,37962,37962,37962,37962,37962,35882,35882,35882,35882,35882,35849,35849,35849,35882,35882,35882,35849,35882,35849,35849,35881,35881,35882,35881,35849,35849,35849,
				  37963,35915,35915,37963,37963,35882,35914,35883,35914,35882,35882,35882,35914,35914,35914,35914,37962,35914,35882,37962,37962,37962,37962,37962,37930,37930,37930,37962,37930,37930,37930,37962,37962,37930,37962,37962,37930,35882,35882,35882,35882,35881,35882,35882,35849,35882,35849,35849,35882,35849,35882,35817,35849,35849,35849,35849,35817,35849,35849,35881,
				  35882,37963,35915,35915,35882,35915,35883,35915,35882,35882,35882,35914,35882,35914,37962,37962,35914,35914,35882,37930,37962,37962,37962,37962,35882,37930,35882,37930,37930,35850,37930,37930,37930,35882,35882,35882,35882,35882,35849,37930,35849,35882,35849,35882,35849,35882,35849,35849,35882,35849,35849,35849,35849,35849,35849,35849,35849,35849,35849,35849,
				  35915,35882,35915,35882,35915,35915,35915,35882,35882,35882,35915,35882,35914,37962,37962,35914,35914,35882,35914,35914,35914,35882,35882,35882,37930,37930,35882,37930,35882,35882,35882,35882,35882,35882,37962,35849,35882,35849,37962,35849,35882,35849,35882,35849,35849,35882,35849,35849,35849,35849,35849,35849,35849,35849,35817,35817,35849,35817,35817,35817,
				  35914,35914,35882,35882,35882,35882,35882,35882,35882,35882,35882,35882,35882,35914,35914,35914,35882,35914,35914,35914,35914,35882,37930,37930,37930,35882,35882,37930,37930,37930,37930,37930,35882,35882,37962,35849,35849,35914,35849,35914,35849,35882,35849,35882,35849,35849,35849,35849,35849,35849,35849,35849,35817,35817,35817,35817,35849,35849,35817,35817,
				  35915,35915,35883,35883,35883,35883,35883,35882,35882,35882,35882,35882,35914,35914,35914,35882,35882,35882,35914,35882,35914,35882,35914,35882,35882,35882,35882,35882,35882,35882,35882,35882,35882,35882,35882,35882,35914,35882,35914,35849,35882,35849,35882,35849,35849,35849,35849,35849,35849,35849,35849,35849,35817,35849,35849,35849,35849,35849,35817,35818,
				  35883,35915,35883,35883,35883,35882,35882,35882,35882,35882,35850,35882,35882,35882,35882,35882,35882,35882,35882,35882,35914,35914,35914,35882,35882,35882,35882,35882,35882,35850,35882,35882,35882,35882,35882,35914,35882,35914,35849,35882,35849,35882,35881,35849,35849,35849,35849,35849,35849,35849,35849,35849,35849,35849,35849,35849,35817,35817,35849,35818,
				  35883,35883,35883,35883,35883,35883,35883,35883,35883,35883,35882,35882,35882,35882,35882,35882,35882,35882,35882,35882,35882,35882,35882,35882,35882,35882,35882,35882,35882,35882,35882,35882,35882,35882,35882,35882,35882,35882,35882,35882,35882,35850,35882,35849,35850,35817,35849,35849,35817,35849,35849,35849,35817,35817,35817,35817,33769,33769,35818,35818,
				  35883,35883,35882,35883,35883,35915,35915,35883,35883,35883,35915,35883,35882,35882,35882,35882,35882,35882,35882,35882,35882,35882,35882,35882,35882,35850,35850,35850,35882,35882,35882,35850,35850,35850,35882,35850,35882,35882,35882,35882,35882,35882,35849,35850,35882,35817,35850,35850,35817,35850,35849,35817,33769,33769,35817,35817,35817,35817,35850,35818,
				 
		  }; 

	
	
	    static int drawhours[]=
	    	{
	    			
	    			
	    			44267,44266,42219,42219,44267,42218,42218,42218,42186,42186,42186,42186,42154,42154,42186,42186,42155,40107,40106,40106,40107,40106,40074,40075,40075,40074,40075,40075,38027,38027,38027,40075,38027,38027,38027,38027,38026,38027,38027,38027,38026,38027,38027,38027,38027,38027,38027,38026,37994,37994,40074,40042,40074,37994,37995,37994,38027,38027,
	    			44299,44267,44267,44267,42218,42218,42186,42186,42219,42186,42186,42186,42186,42186,42154,42155,42155,40107,40106,40106,40107,40106,40075,40075,40074,40074,40075,40075,38027,38027,38027,40075,40075,38027,38027,38027,38026,38027,38027,38027,38027,38027,38027,38027,38027,38027,38026,38027,40074,40074,40074,37994,40074,40074,40075,40075,38027,38026,
	    			44299,42219,42218,44267,42218,42218,42218,42218,42219,42186,42187,42187,42186,42154,42155,40106,42155,40107,40074,40074,40074,40074,40075,40075,40075,40075,38027,38027,38027,38027,38027,40075,38027,38027,38026,38026,38026,37994,38027,37994,37994,38027,38027,38026,38026,38026,38026,38026,37994,40074,40075,40075,40075,40075,40075,40075,40075,38027,
	    			44299,42218,42218,42218,42218,42218,42186,42218,42186,42186,42186,42154,42154,42154,42155,42155,42155,40107,40106,40106,40106,40074,40075,40074,40075,40075,38027,38027,38027,38026,38026,38027,38027,38026,38026,38026,37994,38026,38026,37994,38027,38026,38026,38027,38027,38027,40107,40107,37994,40042,40075,40042,40042,40075,40075,40075,38027,38026,
	    			42218,44299,44299,44267,42218,42218,42218,42218,42186,42186,42187,42187,42187,42187,42155,40106,40107,40107,40107,40107,40075,40075,40075,40075,40075,37994,40107,40107,40075,38026,38027,40107,38027,38027,38027,37995,38027,38027,38027,40075,37995,37995,37995,37995,37995,37995,37995,38026,40075,38027,38026,38027,38027,38027,38027,37995,40075,40075,
	    			42218,42218,44299,44267,42219,42218,42218,42186,42186,42186,42186,42186,42187,42187,42154,42154,40107,40107,40107,40107,40075,40074,40074,40074,40075,37994,38026,38027,40075,40075,38026,38026,37995,37995,37995,38027,37995,37995,37995,37995,37995,37995,37995,38027,38027,38027,37995,37995,38027,38027,38026,38026,38027,38027,37995,38027,40075,37995,
	    			44267,44267,44267,42218,42219,42219,42187,42186,42187,42187,42187,42187,42155,42187,42155,40107,40075,40074,40075,40074,40075,40074,40075,40075,40075,40075,38026,38026,38027,40075,38027,37994,37994,37995,38027,38027,37995,37994,37994,37994,37995,37995,38027,38027,37995,37995,37995,37995,38027,37995,37995,38027,38027,38027,38027,38027,37995,40075,
	    			44267,44267,42218,42218,42219,42219,42219,42186,42187,42187,42187,42187,42187,42154,40107,40107,40107,40107,40074,40074,40075,40075,40075,40075,40042,40075,40107,38027,37994,38026,38027,38027,37995,38027,38027,38027,38027,37995,37995,37994,37995,37995,37995,37995,37995,37995,37995,37995,38027,38027,38027,38027,38027,37995,38027,37995,40075,40075,
	    			44267,42218,42218,42218,42219,42218,42219,42186,42186,42187,42187,42187,42187,40107,40107,40107,40107,42123,40107,40075,40075,40074,40075,40075,38026,40107,40075,37995,37995,37995,38027,38027,37995,38027,38027,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,38027,38027,38027,37995,38027,37995,37995,40075,40075,
	    			44267,42218,42218,42218,42219,42186,42219,42219,42187,42187,42187,42187,42187,42155,40107,40107,42123,42123,40107,40075,40075,40075,40075,40075,40075,38027,37995,37995,38027,38027,38026,37994,37995,37995,37995,37995,37994,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,38027,38027,37995,38027,37995,37995,37995,37995,40075,
	    			44267,42218,42218,42218,42218,42218,42186,42186,42187,42187,42187,42187,40107,40107,40107,40107,42122,42123,40107,40075,40075,40075,40075,40075,40075,38026,37995,37995,38027,38027,37995,37994,37994,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,38027,38027,37995,37995,37995,38027,37995,37995,
	    			44267,42218,42218,42218,42218,42186,42186,42219,42186,42186,42187,42187,40107,40107,40107,40107,40074,40107,40107,40074,40075,40075,40075,37994,38027,38027,38027,40075,38027,37994,37994,37995,37995,37995,37995,38027,38027,38027,38027,38027,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,38027,37995,37995,37995,37995,38027,37995,37995,
	    			42218,44267,44267,42186,42186,42187,42187,42154,42155,42155,42155,42155,42187,42155,42155,40107,42155,40075,40075,40107,40107,40075,40075,40075,40075,40075,38027,38027,37995,37994,37995,37995,37995,37994,37994,37995,38027,38027,38027,38027,38027,38027,37995,37995,37995,37995,37995,37995,38027,38027,38027,37995,37995,37995,37995,37995,40075,37995,
	    			44267,44267,44267,44266,42186,42186,42187,42154,42155,42155,42187,42187,42187,42155,42155,40107,40075,40075,40075,40075,40075,40074,40075,40075,37995,37995,38027,37995,37995,37995,37995,37995,37994,37995,37994,37994,37994,37994,37995,37995,37995,37995,37995,38027,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,38027,38027,37995,37995,
	    			44267,42219,44266,44266,42187,42186,42154,42187,42187,42187,42187,42187,42155,40107,40107,40107,40107,40107,40107,40107,40075,40075,40075,40075,40075,40075,37995,37995,37995,37995,37995,37995,38027,38027,37995,37995,37994,37994,38027,38027,37994,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,38027,38027,37994,37995,
	    			42219,42186,42186,44266,42187,42186,42187,42187,42155,42155,42155,42187,40107,40106,40107,40107,40107,40107,40107,40107,40075,40075,40075,40075,40075,40075,37995,37995,37995,37995,37995,37994,37994,37994,38027,37995,37995,37995,38027,38027,37994,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,
	    			42218,42186,42186,44267,42187,42186,42187,42187,42187,42187,42187,42187,42155,40107,40107,40107,40075,40075,40075,40075,40075,40042,37994,40075,40075,40075,37995,37994,37995,37995,37995,37994,37994,37995,37994,37994,37995,38027,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,
	    			42218,42218,42187,42187,42186,42186,42154,42154,42187,42187,42187,40107,42155,40107,40107,40107,40107,40075,40074,40075,40075,40043,37994,40075,40075,37995,37995,37994,37995,37995,37995,37995,37995,37994,37994,37994,37995,38027,38027,38027,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37994,37995,37995,37995,37995,37995,37995,37995,
	    			42218,42218,42219,42186,42186,42186,42187,42186,42155,42154,40107,40107,40107,40107,40107,40106,40107,40075,40075,40075,40075,40075,40075,40075,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,38027,38027,38027,38027,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,
	    			42186,42218,42219,42186,42186,42186,42187,42186,42187,42187,40107,42155,40139,40107,40107,40075,40075,40075,37995,40075,40075,40075,40075,40043,38027,38027,38027,37995,37994,37994,37994,37995,35914,35946,38027,38027,38027,37995,35946,35946,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,38027,37995,37995,37995,37995,37995,37995,
	    			42219,42219,42186,42186,42187,42154,42187,42155,42155,42187,42187,40107,40107,40107,40107,40107,40107,40107,40075,40075,40075,40075,38027,38027,37995,37995,37995,37995,37995,37995,37995,37995,37995,38027,38027,37995,37994,37994,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37963,37963,37995,37995,37995,37995,37995,37963,37995,
	    			42219,42186,42219,42186,42154,42187,42154,42187,42187,42187,42155,40106,40106,40107,40107,40107,40107,40075,40075,40075,40075,40075,37995,38027,37995,37995,37995,37995,37995,37995,37995,37995,37995,38027,38027,38027,37995,37994,37995,37995,37995,37995,37995,37995,37995,37995,37995,37963,37995,37963,37963,37995,37995,37995,37995,37995,37995,37995,
	    			42186,44267,42186,42186,42187,40106,42187,42154,42187,42187,42187,40107,40106,40107,40107,40107,40075,40075,38027,38027,38027,38027,38027,38027,37995,37995,37995,37995,37995,37995,37995,37995,37995,38027,38027,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37963,37995,37995,37963,
	    			42219,42186,42219,42186,42154,42187,40106,42187,42187,42187,40139,40107,40107,40107,40107,40107,40107,40107,40075,40075,38027,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37963,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37963,37995,37963,37995,
	    			42186,42219,42154,42187,42186,40106,42187,42154,40107,42155,40139,40139,40107,40107,40107,40107,40107,40075,40075,38027,37995,37994,37995,37995,37995,37995,37995,37995,37995,37995,37963,37995,37995,37995,37995,37995,37995,37995,37995,37995,37963,37963,37963,37995,37963,37963,37995,37995,37963,37963,37963,37963,37963,37963,37963,37995,37963,37963,
	    			42186,42154,42187,42186,42154,42187,40106,42187,42155,40107,40107,42187,40139,40107,38059,38059,40075,38027,38027,38027,38027,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37963,37963,37963,37963,37963,37963,37963,37963,37963,37995,37963,37963,
	    			42186,42186,42154,42187,42187,42154,42187,42155,40107,40106,40107,40107,40139,40107,40107,40107,40107,40075,38027,38027,38027,38027,38027,38027,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37963,37963,37963,37963,37963,37963,37963,37963,37963,37963,37963,37995,37995,
	    			42187,42186,42154,42154,42186,42187,42187,42154,42187,40106,40107,42187,40139,40107,38059,40107,40107,38027,37995,37995,38027,37995,37995,37995,37995,37995,37995,37995,37995,37995,37963,37995,37963,37995,37995,37995,37995,37995,37995,37995,37963,37963,37963,37963,37963,37963,37963,37963,37963,37963,37963,37963,37963,37963,37931,37963,37995,37995,
	    			42187,42155,42187,42187,42187,42187,42187,42187,42187,40107,40107,40075,40075,40107,40107,40075,40075,40075,40075,38027,37995,37995,37995,37995,37995,37995,37995,37995,37995,37963,37995,37995,37995,37995,37995,37995,37995,37963,37963,37963,37963,37963,37963,37963,37995,37995,37963,37963,37995,37963,37963,37963,37963,37995,37963,37963,37995,37963,
	    			42187,42187,42187,42187,42187,42187,42155,42155,40107,40107,40107,40107,40107,40107,38027,38027,40075,40075,40075,40075,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37963,37995,37995,37995,37963,37963,37995,37963,37995,37963,37963,37995,37995,37995,37996,37963,37995,37995,37995,37995,37963,37963,37963,37963,37963,
	    			42155,42155,42155,42155,42155,42155,42155,40107,40107,40107,40107,40107,40075,40075,40075,40075,40075,40075,40075,40075,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,35947,37995,37995,37963,37995,37995,37963,37963,37995,37963,37995,37963,37963,37995,37995,37963,37963,37995,37963,37963,37963,37963,37963,37963,37963,37963,37963,
	    			42155,42155,42155,42155,42155,42155,40107,42155,42187,40107,40107,40075,40074,40075,40075,40107,40075,40075,37995,40075,37995,37995,37995,37995,37995,37995,37995,37995,37963,37995,35947,37995,37995,37995,37963,37963,37963,37963,37963,37995,37963,37963,37963,37963,37963,37963,35915,37963,37995,37995,37963,37963,37963,37963,37963,37995,37963,37963,
	    			42154,42155,42187,42187,42187,42187,42155,42155,40075,40107,40107,40107,40075,40075,40075,40042,40075,40075,40075,40075,37995,37995,37995,37995,37995,37995,37963,37963,37995,37995,37995,37995,37995,37963,37963,37995,37995,37963,37963,37963,37995,37995,37963,37963,37995,37995,37963,37963,37995,37995,37963,37963,37963,37963,37963,37963,37963,37963,
	    			42154,42155,42187,42187,42187,42187,42155,42155,40075,40075,40107,40107,40075,40075,40075,40075,40075,40075,40075,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,35914,37962,37963,37963,37963,37963,37963,37963,37963,37963,37963,37963,37963,37963,37963,37963,37963,37995,37963,37963,37995,37963,37963,37963,37963,37963,37963,37963,
	    			42155,42187,42155,42187,42187,42187,42155,42155,42155,40107,40075,40075,40043,40043,40075,40075,40075,40075,40075,37995,37995,37995,37995,37994,37995,37963,37962,37962,37995,37995,37963,35915,37995,37995,37995,37995,37995,37995,37995,37995,37995,37995,37963,35915,37995,37995,37995,37995,37963,37963,37963,37995,37995,37963,37963,35915,37963,37963,
	    	};
	 
	 
	
//int mark=	controller.roseimage.rose[1];
	
	
	
	public static void RD_ACTIVE()
	{
		
		RD_edit.low();
		
	}
	
	
	public static void RD_IDLE()
	{
		
		RD_edit.high();
		
	}
	
	
	
	public static void WR_ACTIVE()
	{
		
		WR_edit.low();
		
	}
	
	
	public static void WR_IDLE()
	{
		
		WR_edit.high();
		
	}
	
	
	
	public static void CD_COMMAND()
	{
		
		CD_edit.low();
		
	}
	
	
	public static void CD_DATA()
	{
		
		CD_edit.high();
		
	}
	
	
	public static void CS_ACTIVE()
	{
		
		CS_edit.low();
		
	}
	
	
	public static void CS_IDLE()
	{
		
		CS_edit.high();
		
	}
	
	
	
	
	public static void RESET_ACTIVE()
	{
		
		RESET_edit.low();
		
	}
	
	
	public static void RESET_IDLE()
	{
		
		RESET_edit.high();
		
	}
	
	
	public static void WR_STROBE()
	{
		
		 WR_ACTIVE();
		 WR_IDLE(); 
		
	}
	
	
	
	
	
	

   static void WriteCmd(int x)
{ 
	   
	   CD_COMMAND();
       write16(x);
       CD_DATA(); 
}

	
   static void WriteData(int x)
   { 
     write16(x);
    //write24(x);
   }

	
   static void WriteCmdData(int cmd, int dat)
   {
       CS_ACTIVE();
       WriteCmd(cmd);
       WriteData(dat);
       CS_IDLE();
   }
   
   
   
   

static void write_8(short x)

{
  
  
  
	
	
	if((x&128)==128)
	{
		
		D7.high();
	}
	
	if((x&128)==0)
	{
		
		D7.low();
	}
	
	
	
	if((x&64)==64)
	{
		
		D6.high();
	}
	
	if((x&64)==0)
	{
		
		D6.low();
	}
	
	
	if((x&32)==32)
	{
		
		D5.high();
	}
	
	if((x&32)==0)
	{
		
		D5.low();
	}
	
	
	if((x&16)==16)
	{
		
		D4.high();
	}
	
	if((x&16)==0)
	{
		
		D4.low();
	}
	
	
	
	
	if((x&8)==8)
	{
		
		D3.high();
	}
	
	if((x&8)==0)
	{
		
		D3.low();
	}
	
	
	
	
	
	
	if((x&4)==4)
	{
		
		D2.high();
	}
	
	if((x&4)==0)
	{
		
		D2.low();
	}
	
	
	
	
	if((x&2)==2)
	{
		
		D1.high();
	}
	
	if((x&2)==0)
	{
		
		D1.low();
	}
	
	
	
	if((x&1)==1)
	{
		
		D0.high();
	}
	
	if((x&1)==0)
	{
		
		D0.low();
	}
	
	
	
	
 
  
}

   
static void write8(int x)     
    {
	  
	 short xx = (short) x;
	  write_8(xx);
	  WR_STROBE(); 
	  }
	  



static void write16(int x)  

{ 
   int hh = (x>>8);
 
   short h = (short) hh;
   
  short l = (short)x;
  write8(h);
 
  write8(l);
}








static void begin_new(int ID)



{

  
    reset_new();

  
  
   _lcd_xor = 0;
   _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS; 

System.out.println("_lcd_capable is " + _lcd_capable);


          CS_ACTIVE();
          CD_COMMAND();
          write8(1);  //0x01
          CS_IDLE();
         
      //     delay(150); 
    
          
          
          
        	try {
  			TimeUnit.MICROSECONDS.sleep(150000);
  		} catch (InterruptedException e) {
  			// TODO Auto-generated catch block
  			e.printStackTrace();   
  		}	
  		       
          
          
          
     
          CS_ACTIVE();
          CD_COMMAND();
          write8(40);    //0x28
          CS_IDLE();
       
   
   
          CS_ACTIVE();
          CD_COMMAND();
          write8(58); //0x3A
    
    
          CD_DATA();
          write8(85);  //0x55
    
    
    
          CS_IDLE();
   
   //power control 1
   
   
   
           CS_ACTIVE();
          CD_COMMAND();
          write8(192);  //0xC0
    
    
          CD_DATA();
          write8(13); //0x0d
    
    
           CD_DATA();
          write8(13); //0x0d
    
    
    
          CS_IDLE();
    
    
    
       //power control 2
   
   
   
          CS_ACTIVE();
          CD_COMMAND();
          write8(193);//0xC1
    
    
           CD_DATA();
          write8(67);  //0x43
    
    
           CD_DATA();
          write8(0); //0x00
    
    
    
          CS_IDLE();      
    
    
    
     //power control 3
   
   
   
          CS_ACTIVE();
          CD_COMMAND();
          write8(194);  //0xC2
    
    
          CD_DATA();
          write8(0);  //0x00
    
    
          CS_IDLE();    
    
    
    
    
    //VCOM  Control 1
   
   
   
          CS_ACTIVE();
          CD_COMMAND();
          write8(197); //0xC5
    
    
          CD_DATA();
          write8(0); //0x00
    
    
          CD_DATA();
          write8(72);  //0x48
    
    
          CD_DATA();
          write8(0);  //0x00
    
    
          CD_DATA();
          write8(72); //0x48
    
    
          CS_IDLE();    
   
   
   
    //Inversion Control
    
    
          CS_ACTIVE();
          CD_COMMAND();
          write8(180);  //0xB4
    
    
          CD_DATA();
          write8(0); //0x00
    
    
         CS_IDLE();
   
   
   
    // Display Function Control  0xB6, 3, 0x02, 0x02, 0x3B,
    
    
    
          CS_ACTIVE();
          CD_COMMAND();
          write8(182); //0xB6
    
    
          CD_DATA();
          write8(2);  //0x02
    
    
    
          CD_DATA();
          write8(2); //0x02
    
    
          CD_DATA();
          write8(59);  //0x3B
    
    
    
    
      CS_IDLE();
    
    
    ///gamma control
    //0xE0, 15, 0x0F, 0x21, 0x1C, 0x0B, 0x0E, 0x08, 0x49, 0x98, 0x38, 0x09, 0x11, 0x03, 0x14, 0x10, 0x00, 
   


    
     
          CS_ACTIVE();
          CD_COMMAND();
          write8(224); //0xE0
    
    
          CD_DATA();
          write8(15);  //0x0F
    
    
          CD_DATA();
          write8(33); //0x21
    
    
          CD_DATA();
          write8(28); //0x1C
    
    
          CD_DATA();
          write8(11); //0x0B

          CD_DATA();
          write8(14); //0x0E

          
          CD_DATA();
          write8(8); //0x08

          
          CD_DATA();
          write8(73); //0x49

          
          CD_DATA();
          write8(152); //0x98



          CD_DATA();
          write8(56); //0x38

          
          CD_DATA();
          write8(9); //0x09


          CD_DATA();
          write8(17); //0x11

          
          CD_DATA();
          write8(3); //0x03

        
          CD_DATA();
          write8(20);  //0x14

          
          CD_DATA();
          write8(16); //0x10    

          CD_DATA();
          write8(0);  // 0x00   


    
    
          CS_IDLE();   

        //0xE1, 15, 0x0F, 0x2F, 0x2B, 0x0C, 0x0E, 0x06, 0x47, 0x76, 0x37, 0x07, 0x11, 0x04, 0x23, 0x1E, 0x00,      
    

            
          CS_ACTIVE();
          CD_COMMAND();
          write8(225);   //0xE1
    
    
         
    
    
          CD_DATA();
          write8(15); //0x0F
    
    
          CD_DATA();
          write8(47);  //0x2F 
    
    
          CD_DATA();
          write8(43); //0x2B

          CD_DATA();
          write8(12); //0x0C

          
          CD_DATA();
          write8(14);  //0x0E

          
          CD_DATA();
          write8(6);   //0x06

          
          CD_DATA();
          write8(71);   //0x47



          CD_DATA();
          write8(118);   //0x76

          
          CD_DATA();
          write8(55);   //0x37


          CD_DATA();
          write8(7);  //0x07

          
          CD_DATA();
          write8(17);  //0x11

        
          CD_DATA();
          write8(4);    //0x04

          
          CD_DATA();
          write8(35);   //0x23    

          CD_DATA();
          write8(30);    //0x1E


          CD_DATA();
          write8(0);  //0x00   


    
    
          CS_IDLE();   


  

    
     //Sleep Out
    
         CS_ACTIVE();
          CD_COMMAND();
          write8(17);   //0x11
          CS_IDLE();
    
    
    //delay(150);
          
          
      	try {
			TimeUnit.MICROSECONDS.sleep(150000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();   
		}	
		     
          
    
     //Display On
      CS_ACTIVE();
      CD_COMMAND();
      write8(41);   //0x29
      CS_IDLE();
    
    
    

   setRotation();


}







static void setAddrWindow(int x, int y, int x1, int y1)
   {

 

              if ((_lcd_capable & MIPI_DCS_REV1)==1) {
     
   
         CS_ACTIVE();
         WriteCmd(_SC);
  
  
         
         
        write8(x >> 8);
        write8(x);
        write8(x1 >> 8);
        write8(x1);
  
         CS_IDLE();
  
  
  
         CS_ACTIVE();
         WriteCmd(_SP);
  
  
        write8(y >> 8);
        write8(y);
        write8(y1 >> 8);
        write8(y1);
  
         CS_IDLE();
    
    
       
    }

                 

  
  }








static void setRotation()
{


     int GS, SS_v, ORG, REV = _lcd_rev;
     short val;
     rotation = 0;           
     _width =  HEIGHT ;
     _height =  WIDTH ;
     val = 72;  //0x48 

  if ((_lcd_capable & INVERT_GS)==1)
      val ^= 128;//0x80
  if ((_lcd_capable & INVERT_SS)==1)
      val ^= 64;//0x40
  if ((_lcd_capable & INVERT_RGB)==1)
      val ^= 8;//0x08
  if ((_lcd_capable & MIPI_DCS_REV1)==1) {
     
    //common_MC:
  
      _MC =  42;  //0x2A;
      _MP =  43;//0x2B;
      _MW =  44;//0x2C;
      _SC =  42; //0x2A;
      _EC =  42; //0x2A;
      _SP =  43; //0x2B;
      _EP =  43; //0x2B;


       CS_ACTIVE();
       WriteCmd(0x36);
    
       write8(val);
       CS_IDLE();
  
  
  
  
      _lcd_madctl = val;


  }

    
      setAddrWindow(0, 0, _width - 1, _height - 1);

}












static void reset_new() 
{





  CS_IDLE();
  RD_IDLE();
  WR_IDLE();
  RESET_IDLE();
  try {
	TimeUnit.MICROSECONDS.sleep(50000);
	 RESET_ACTIVE();
	 TimeUnit.MICROSECONDS.sleep(100000);
	 RESET_IDLE();
	 TimeUnit.MICROSECONDS.sleep(100000);
	
	
} catch (InterruptedException e)
  
  {
	
	e.printStackTrace();
  }
 

}



static void fillScreen()
{

    for(int i=0;i<320;i++)
     {
      for(int j=0;j<480;j++)
         {
         drawPixel(i, j, BLACK);  

    
         }

  
       }

}




static void drawPixel(int x, int y, int color)
{
   
  

   

    setAddrWindow(x, y, x, y);

    WriteCmdData(_MW, color);
}



static void drawPixelnew(int x, int y, double color)
{
   
  

   

    setAddrWindow(x, y, x, y);

    int newcolor = (int) color;
    
    
    WriteCmdData(_MW, newcolor);
}





static void readfromnet()
{
	  
	  
	  StringBuilder jsonbuilder= new StringBuilder() ;
	  
	  
	  try {
		//URL url = new URL("https://www.cubeminx.com/");
		  
		  URL url = new URL("https://api.openweathermap.org/data/2.5/weather?q=MUMBAI,in&APPID=3d2966df871c029f84d86f2032d0c2c5");  
		  
	
	   
	   
	   
		BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));
		String str = "";
		while (null != (str = br.readLine())) {
			
			jsonbuilder.append(str);
			
			
			System.out.println(str);
		}
	} catch (Exception ex) {
		ex.printStackTrace();
	}
	  
	  
	  String finaljson = jsonbuilder.toString();
	  
	 JSONParser parser = new JSONParser();
	 
	 
	 try
	 {
		 
		 Object object = parser.parse(finaljson);
		 
		 
		 JSONObject jsonObject = (JSONObject)object;
		 
		String main = jsonObject.get("main").toString();
		//System.out.println("JO" + main);
		 
		
		
		
		String[] mainnew = (main.split(",")); 
		 System.out.println("mainnew ");
		 System.out.println(mainnew[0]);
		 System.out.println(mainnew[2]);
		 
		 
		 String weather = jsonObject.get("weather").toString();
      //System.out.println("JO" + weather);
      
      
  	String[] weathernew = (weather.split(",")); 
		 System.out.println("weathernew ");
		 System.out.println(weathernew[1]);
		 System.out.println(weathernew[2]);
		 
      
      float tempint = Float.parseFloat(mainnew[0].substring(8, 13));
      String bigtemp = String.valueOf(tempint-272.15);
       finaltemp = bigtemp.substring(0,5);
      
      System.out.println(finaltemp); 
      
      String humidity = mainnew[2].substring(11,13);
      finalhumidity =  humidity + "" +"%";
      
      System.out.println(finalhumidity); 
      
      
       desc = weathernew[1].substring(15,20);
      System.out.println(desc);
		 
		 
	 }
	  catch(Exception e)
	 {
		  e.printStackTrace();
	 }
	 
	 
	 
	 
	  
	  
}








static String intto4bit(String part)
{
	
	String convertedpart = null;
	
	
	if(part.equals("0"))
	{
		convertedpart="0000";	
		
	}

	if(part.equals("1"))
	{
		convertedpart="0001";	
		
	}
	
	if(part.equals("2"))
	{
		convertedpart="0010";	
		
	}
	
	
	if(part.equals("3"))
	{
		convertedpart="0011";	
		
	}
	
	if(part.equals("4"))
	{
		convertedpart="0100";	
		
	}
	
	
	if(part.equals("5"))
	{
		convertedpart="0101";	
		
	}
	
	
	if(part.equals("6"))
	{
		convertedpart="0110";	
		
	}
	
	
	if(part.equals("7"))
	{
		convertedpart="0111";	
		
	}
	
	
	if(part.equals("8"))
	{
		convertedpart="1000";	
		
	}
	
	
	if(part.equals("9"))
	{
		convertedpart="1001";	
		
	}
	
	
	if(part.equals("A"))
	{
		convertedpart="1010";	
		
	}
	
	if(part.equals("B"))
	{
		convertedpart="1011";	
		
	}
	
	if(part.equals("C"))
	{
		convertedpart="1100";	
		
	}
	
	if(part.equals("D"))
	{
		convertedpart="1101";	
		
	}
	
	if(part.equals("E"))
	{
		convertedpart="1110";	
		
	}
	
	
	
	if(part.equals("F"))
	{
		convertedpart="1111";	
		
	}
	
	return convertedpart;
	
}









static void draw_letter(int x,int y,String word)
{
	
	
int newy=0;	
	
String firstword= word.substring(2,3);
String secondword= word.substring(3,4);


String firsthex= intto4bit(firstword);
String secondhex= intto4bit(secondword);





String readbit= firsthex+secondhex;



String bit0 = readbit.substring(0,1);
String bit1 = readbit.substring(1,2);
String bit2 = readbit.substring(2,3);
String bit3 = readbit.substring(3,4);
String bit4 = readbit.substring(4,5);
String bit5 = readbit.substring(5,6);
String bit6 = readbit.substring(6,7);
String bit7 = readbit.substring(7,8);



if(bit0.equals("1"))
{
	
	newy=y+35;

for(int i=x;i<x+5;i++)
{
	

	for(int j=newy;j<newy+5;j++)
	{
		

		  drawPixel(i, j, WHITE);		
		
		
	}

	
	
	
	
   }

newy=0;

}



if(bit1.equals("1"))
{
	
	newy=y+30;

for(int i=x;i<x+5;i++)
{
	

	for(int j=newy;j<newy+5;j++)
	{
		

		  drawPixel(i, j, WHITE);		
		
		
	}

	
	
	
	
   }

newy=0;

}





if(bit2.equals("1"))
{
	
	newy=y+25;

for(int i=x;i<x+5;i++)
{
	

	for(int j=newy;j<newy+5;j++)
	{
		

		  drawPixel(i, j, WHITE);		
		
		
	}

	
	
	
	
   }

newy=0;

}






if(bit3.equals("1"))
{
	
	newy=y+20;

for(int i=x;i<x+5;i++)
{
	

	for(int j=newy;j<newy+5;j++)
	{
		

		  drawPixel(i, j, WHITE);		
		
		
	}

	
	
	
	
   }

newy=0;

}





if(bit4.equals("1"))
{
	
	newy=y+15;

for(int i=x;i<x+5;i++)
{
	

	for(int j=newy;j<newy+5;j++)
	{
		

		  drawPixel(i, j, WHITE);		
		
		
	}

	
	
	
	
   }

newy=0;

}





if(bit5.equals("1"))
{
	
	newy=y+10;

for(int i=x;i<x+5;i++)
{
	

	for(int j=newy;j<newy+5;j++)
	{
		

		  drawPixel(i, j, WHITE);		
		
		
	}

	

	
	
   }

newy=0;

}





if(bit6.equals("1"))
{
	
	newy=y+5;

for(int i=x;i<x+5;i++)
{
	

	for(int j=newy;j<newy+5;j++)
	{
		

		  drawPixel(i, j, WHITE);		
		
		
	}

	
	
	
	
   }

newy=0;

}





if(bit7.equals("1"))
{
	
	newy=y+0;

for(int i=x;i<x+5;i++)
{
	

	for(int j=newy;j<newy+5;j++)
	{
		

		  drawPixel(i, j, WHITE);		
		
		
	}

	
	
	
	
   }

newy=0;

}




	
}










static void draw_A(int x,int y)
{
draw_letter(x,y,"0X7E");
draw_letter(x+5,y,"0X11");
draw_letter(x+10,y,"0X11");
draw_letter(x+15,y,"0X11");
draw_letter(x+20,y,"0X7E");

}


static void draw_B(int x,int y)
{
	
	//0x7F, 0x49, 0x49, 0x49, 0x36,// B	
draw_letter(x,y,"0X7F");
draw_letter(x+5,y,"0X49");
draw_letter(x+10,y,"0X49");
draw_letter(x+15,y,"0X49");
draw_letter(x+20,y,"0X36");

}

static void draw_C(int x,int y)
{
//  0x3E, 0x41, 0x41, 0x41, 0x22,// C
draw_letter(x,y,"0X3E");
draw_letter(x+5,y,"0X41");
draw_letter(x+10,y,"0X41");
draw_letter(x+15,y,"0X41");
draw_letter(x+20,y,"0X22");

}


static void draw_D(int x,int y)
{
//  0x7F, 0x41, 0x41, 0x22, 0x1C,// D
draw_letter(x,y,"0X7F");
draw_letter(x+5,y,"0X41");
draw_letter(x+10,y,"0X41");
draw_letter(x+15,y,"0X22");
draw_letter(x+20,y,"0X1C");

}



static void draw_E(int x,int y)
{
// 0x7F, 0x49, 0x49, 0x49, 0x41,// E
draw_letter(x,y,"0X7F");
draw_letter(x+5,y,"0X49");
draw_letter(x+10,y,"0X49");
draw_letter(x+15,y,"0X49");
draw_letter(x+20,y,"0X41");

}


static void draw_F(int x,int y)
{
//  0x7F, 0x09, 0x09, 0x01, 0x01,// F
draw_letter(x,y,"0X7F");
draw_letter(x+5,y,"0X09");
draw_letter(x+10,y,"0X09");
draw_letter(x+15,y,"0X01");
draw_letter(x+20,y,"0X01");

}


static void draw_G(int x,int y)
{
// 0x3E, 0x41, 0x41, 0x51, 0x32,// G
draw_letter(x,y,"0X3E");
draw_letter(x+5,y,"0X41");
draw_letter(x+10,y,"0X41");
draw_letter(x+15,y,"0X51");
draw_letter(x+20,y,"0X32");

}



static void draw_H(int x,int y)
{
//0x7F, 0x08, 0x08, 0x08, 0x7F,// H
draw_letter(x,y,"0X7F");
draw_letter(x+5,y,"0X08");
draw_letter(x+10,y,"0X08");
draw_letter(x+15,y,"0X08");
draw_letter(x+20,y,"0X7F");

}


static void draw_I(int x,int y)
{
// 0x00, 0x41, 0x7F, 0x41, 0x00,// I
draw_letter(x,y,"0X00");
draw_letter(x+5,y,"0X41");
draw_letter(x+10,y,"0X7F");
draw_letter(x+15,y,"0X41");
draw_letter(x+20,y,"0X00");

}

static void draw_J(int x,int y)
{
//0x20, 0x40, 0x41, 0x3F, 0x01,// J
draw_letter(x,y,"0X20");
draw_letter(x+5,y,"0X40");
draw_letter(x+10,y,"0X41");
draw_letter(x+15,y,"0X3F");
draw_letter(x+20,y,"0X01");

}


static void draw_K(int x,int y)
{
// 0x7F, 0x08, 0x14, 0x22, 0x41,// K
draw_letter(x,y,"0X7F");
draw_letter(x+5,y,"0X08");
draw_letter(x+10,y,"0X14");
draw_letter(x+15,y,"0X22");
draw_letter(x+20,y,"0X41");

}


static void draw_L(int x,int y)
{
// 0x7F, 0x40, 0x40, 0x40, 0x40,// L
draw_letter(x,y,"0X7F");
draw_letter(x+5,y,"0X40");
draw_letter(x+10,y,"0X40");
draw_letter(x+15,y,"0X40");
draw_letter(x+20,y,"0X40");

}


static void draw_M(int x,int y)
{
//  0x7F, 0x02, 0x04, 0x02, 0x7F,// M
draw_letter(x,y,"0X7F");
draw_letter(x+5,y,"0X02");
draw_letter(x+10,y,"0X04");
draw_letter(x+15,y,"0X02");
draw_letter(x+20,y,"0X7F");

}



static void draw_N(int x,int y)
{
//  0x7F, 0x04, 0x08, 0x10, 0x7F,// N
draw_letter(x,y,"0X7F");
draw_letter(x+5,y,"0X04");
draw_letter(x+10,y,"0X08");
draw_letter(x+15,y,"0X10");
draw_letter(x+20,y,"0X7F");

}


static void draw_O(int x,int y)
{
//  0x3E, 0x41, 0x41, 0x41, 0x3E,// O
draw_letter(x,y,"0X3E");
draw_letter(x+5,y,"0X41");
draw_letter(x+10,y,"0X41");
draw_letter(x+15,y,"0X41");
draw_letter(x+20,y,"0X3E");

}



static void draw_P(int x,int y)
{
// 0x7F, 0x09, 0x09, 0x09, 0x06,// P
draw_letter(x,y,"0X7F");
draw_letter(x+5,y,"0X09");
draw_letter(x+10,y,"0X09");
draw_letter(x+15,y,"0X09");
draw_letter(x+20,y,"0X06");

}



static void draw_Q(int x,int y)
{
//  0x3E, 0x41, 0x51, 0x21, 0x5E,// Q
draw_letter(x,y,"0X3E");
draw_letter(x+5,y,"0X41");
draw_letter(x+10,y,"0X51");
draw_letter(x+15,y,"0X21");
draw_letter(x+20,y,"0X5E");

}




static void draw_R(int x,int y)
{
//  0x7F, 0x09, 0x19, 0x29, 0x46,// R
draw_letter(x,y,"0X7F");
draw_letter(x+5,y,"0X09");
draw_letter(x+10,y,"0X19");
draw_letter(x+15,y,"0X29");
draw_letter(x+20,y,"0X46");

}




static void draw_S(int x,int y)
{
//  0x46, 0x49, 0x49, 0x49, 0x31,// S
draw_letter(x,y,"0X46");
draw_letter(x+5,y,"0X49");
draw_letter(x+10,y,"0X49");
draw_letter(x+15,y,"0X49");
draw_letter(x+20,y,"0X31");

}




static void draw_T(int x,int y)
{
// 0x01, 0x01, 0x7F, 0x01, 0x01,// T
draw_letter(x,y,"0X01");
draw_letter(x+5,y,"0X01");
draw_letter(x+10,y,"0X7F");
draw_letter(x+15,y,"0X01");
draw_letter(x+20,y,"0X01");

}






static void draw_U(int x,int y)
{
//  0x3F, 0x40, 0x40, 0x40, 0x3F,// U
draw_letter(x,y,"0X3F");
draw_letter(x+5,y,"0X40");
draw_letter(x+10,y,"0X40");
draw_letter(x+15,y,"0X40");
draw_letter(x+20,y,"0X3F");

}


static void draw_V(int x,int y)
{
//  0x1F, 0x20, 0x40, 0x20, 0x1F,// V
draw_letter(x,y,"0X1F");
draw_letter(x+5,y,"0X20");
draw_letter(x+10,y,"0X40");
draw_letter(x+15,y,"0X20");
draw_letter(x+20,y,"0X1F");

}




static void draw_W(int x,int y)
{
//  0x7F, 0x20, 0x18, 0x20, 0x7F,// W
draw_letter(x,y,"0X7F");
draw_letter(x+5,y,"0X20");
draw_letter(x+10,y,"0X18");
draw_letter(x+15,y,"0X20");
draw_letter(x+20,y,"0X7F");

}


static void draw_X(int x,int y)
{
//  0x63, 0x14, 0x08, 0x14, 0x63,// X
draw_letter(x,y,"0X63");
draw_letter(x+5,y,"0X14");
draw_letter(x+10,y,"0X08");
draw_letter(x+15,y,"0X14");
draw_letter(x+20,y,"0X63");

}



static void draw_Y(int x,int y)
{
//  0x03, 0x04, 0x78, 0x04, 0x03,// Y
draw_letter(x,y,"0X03");
draw_letter(x+5,y,"0X04");
draw_letter(x+10,y,"0X78");
draw_letter(x+15,y,"0X04");
draw_letter(x+20,y,"0X03");

}






static void draw_Z(int x,int y)
{
//  0x61, 0x51, 0x49, 0x45, 0x43,// Z
draw_letter(x,y,"0X61");
draw_letter(x+5,y,"0X51");
draw_letter(x+10,y,"0X49");
draw_letter(x+15,y,"0X45");
draw_letter(x+20,y,"0X43");

}



static void draw_a(int x,int y)
{
//  0x20, 0x54, 0x54, 0x54, 0x78,// a
draw_letter(x,y,"0X20");
draw_letter(x+5,y,"0X54");
draw_letter(x+10,y,"0X54");
draw_letter(x+15,y,"0X54");
draw_letter(x+20,y,"0X78");

}



static void draw_b(int x,int y)
{
// 0x7F, 0x48, 0x44, 0x44, 0x38,// b
draw_letter(x,y,"0X7F");
draw_letter(x+5,y,"0X48");
draw_letter(x+10,y,"0X44");
draw_letter(x+15,y,"0X44");
draw_letter(x+20,y,"0X38");

}




static void draw_c(int x,int y)
{
//    0x38, 0x44, 0x44, 0x44, 0x20,// c
draw_letter(x,y,"0X38");
draw_letter(x+5,y,"0X44");
draw_letter(x+10,y,"0X44");
draw_letter(x+15,y,"0X44");
draw_letter(x+20,y,"0X20");

}


static void draw_d(int x,int y)
{
//    0x38, 0x44, 0x44, 0x48, 0x7F,// d
draw_letter(x,y,"0X38");
draw_letter(x+5,y,"0X44");
draw_letter(x+10,y,"0X44");
draw_letter(x+15,y,"0X48");
draw_letter(x+20,y,"0X7F");

}


static void draw_e(int x,int y)
{
//      0x38, 0x54, 0x54, 0x54, 0x18,// e
draw_letter(x,y,"0X38");
draw_letter(x+5,y,"0X54");
draw_letter(x+10,y,"0X54");
draw_letter(x+15,y,"0X58");
draw_letter(x+20,y,"0X18");

}



static void draw_f(int x,int y)
{
//     0x08, 0x7E, 0x09, 0x01, 0x02,// f
draw_letter(x,y,"0X08");
draw_letter(x+5,y,"0X7E");
draw_letter(x+10,y,"0X09");
draw_letter(x+15,y,"0X01");
draw_letter(x+20,y,"0X02");

}




static void draw_g(int x,int y)
{
//  0x08, 0x14, 0x54, 0x54, 0x3C,// g
draw_letter(x,y,"0X08");
draw_letter(x+5,y,"0X14");
draw_letter(x+10,y,"0X54");
draw_letter(x+15,y,"0X54");
draw_letter(x+20,y,"0X3C");

}


static void draw_h(int x,int y)
{
//  0x7F, 0x08, 0x04, 0x04, 0x78,// h
draw_letter(x,y,"0X7F");
draw_letter(x+5,y,"0X08");
draw_letter(x+10,y,"0X04");
draw_letter(x+15,y,"0X04");
draw_letter(x+20,y,"0X78");

}


static void draw_i(int x,int y)
{
//  0x00, 0x44, 0x7D, 0x40, 0x00,// i
draw_letter(x,y,"0X00");
draw_letter(x+5,y,"0X44");
draw_letter(x+10,y,"0X7D");
draw_letter(x+15,y,"0X40");
draw_letter(x+20,y,"0X00");

}

static void draw_j(int x,int y)
{
//  0x20, 0x40, 0x44, 0x3D, 0x00,// j
draw_letter(x,y,"0X20");
draw_letter(x+5,y,"0X40");
draw_letter(x+10,y,"0X44");
draw_letter(x+15,y,"0X3D");
draw_letter(x+20,y,"0X00");

}



static void draw_k(int x,int y)
{
//  0x00, 0x7F, 0x10, 0x28, 0x44,// k
draw_letter(x,y,"0X00");
draw_letter(x+5,y,"0X7F");
draw_letter(x+10,y,"0X10");
draw_letter(x+15,y,"0X28");
draw_letter(x+20,y,"0X44");

}


static void draw_l(int x,int y)
{
//  0x00, 0x41, 0x7F, 0x40, 0x00,// l
draw_letter(x,y,"0X00");
draw_letter(x+5,y,"0X41");
draw_letter(x+10,y,"0X7F");
draw_letter(x+15,y,"0X40");
draw_letter(x+20,y,"0X00");

}



static void draw_m(int x,int y)
{
//  0x7C, 0x04, 0x18, 0x04, 0x78,// m
draw_letter(x,y,"0X7C");
draw_letter(x+5,y,"0X04");
draw_letter(x+10,y,"0X18");
draw_letter(x+15,y,"0X04");
draw_letter(x+20,y,"0X78");

}



static void draw_n(int x,int y)
{
//   0x7C, 0x08, 0x04, 0x04, 0x78,// n
draw_letter(x,y,"0X7C");
draw_letter(x+5,y,"0X08");
draw_letter(x+10,y,"0X04");
draw_letter(x+15,y,"0X04");
draw_letter(x+20,y,"0X78");

}



static void draw_o(int x,int y)
{
//  0x38, 0x44, 0x44, 0x44, 0x38,// o
draw_letter(x,y,"0X38");
draw_letter(x+5,y,"0X44");
draw_letter(x+10,y,"0X44");
draw_letter(x+15,y,"0X44");
draw_letter(x+20,y,"0X38");

}


static void draw_p(int x,int y)
{
//  0x7C, 0x14, 0x14, 0x14, 0x08,// p
draw_letter(x,y,"0X7C");
draw_letter(x+5,y,"0X14");
draw_letter(x+10,y,"0X14");
draw_letter(x+15,y,"0X14");
draw_letter(x+20,y,"0X08");

}


static void draw_q(int x,int y)
{
//  0x08, 0x14, 0x14, 0x18, 0x7C,// q
draw_letter(x,y,"0X08");
draw_letter(x+5,y,"0X14");
draw_letter(x+10,y,"0X14");
draw_letter(x+15,y,"0X18");
draw_letter(x+20,y,"0X7C");

}


static void draw_r(int x,int y)
{
//   0x7C, 0x08, 0x04, 0x04, 0x08,// r
draw_letter(x,y,"0X7C");
draw_letter(x+5,y,"0X08");
draw_letter(x+10,y,"0X04");
draw_letter(x+15,y,"0X04");
draw_letter(x+20,y,"0X08");

}


static void draw_s(int x,int y)
{
//    0x48, 0x54, 0x54, 0x54, 0x20,// s
draw_letter(x,y,"0X48");
draw_letter(x+5,y,"0X54");
draw_letter(x+10,y,"0X54");
draw_letter(x+15,y,"0X54");
draw_letter(x+20,y,"0X20");

}




static void draw_t(int x,int y)
{
//    0x04, 0x3F, 0x44, 0x40, 0x20,// t
draw_letter(x,y,"0X04");
draw_letter(x+5,y,"0X3F");
draw_letter(x+10,y,"0X44");
draw_letter(x+15,y,"0X40");
draw_letter(x+20,y,"0X20");

}



static void draw_u(int x,int y)
{
//   0x3C, 0x40, 0x40, 0x20, 0x7C,// u
draw_letter(x,y,"0X3C");
draw_letter(x+5,y,"0X40");
draw_letter(x+10,y,"0X40");
draw_letter(x+15,y,"0X20");
draw_letter(x+20,y,"0X7C");
}



static void draw_v(int x,int y)
{
//   0x1C, 0x20, 0x40, 0x20, 0x1C,// v
draw_letter(x,y,"0X1C");
draw_letter(x+5,y,"0X20");
draw_letter(x+10,y,"0X40");
draw_letter(x+15,y,"0X20");
draw_letter(x+20,y,"0X1C");
}


static void draw_w(int x,int y)
{
//  0x3C, 0x40, 0x30, 0x40, 0x3C,// w
draw_letter(x,y,"0X3C");
draw_letter(x+5,y,"0X40");
draw_letter(x+10,y,"0X30");
draw_letter(x+15,y,"0X40");
draw_letter(x+20,y,"0X3C");
}



static void draw_x(int x,int y)
{
//   0x44, 0x28, 0x10, 0x28, 0x44,// x
draw_letter(x,y,"0X44");
draw_letter(x+5,y,"0X28");
draw_letter(x+10,y,"0X10");
draw_letter(x+15,y,"0X28");
draw_letter(x+20,y,"0X44");
}



static void draw_y(int x,int y)
{
//   0x0C, 0x50, 0x50, 0x50, 0x3C,// y
draw_letter(x,y,"0X0C");
draw_letter(x+5,y,"0X50");
draw_letter(x+10,y,"0X50");
draw_letter(x+15,y,"0X50");
draw_letter(x+20,y,"0X3C");
}




static void draw_z(int x,int y)
{
//   0x44, 0x64, 0x54, 0x4C, 0x44,// z
draw_letter(x,y,"0X44");
draw_letter(x+5,y,"0X64");
draw_letter(x+10,y,"0X54");
draw_letter(x+15,y,"0X4C");
draw_letter(x+20,y,"0X44");
}



static void draw_curlyopenBrace(int x,int y)
{
//    0x00, 0x08, 0x36, 0x41, 0x00,// {
draw_letter(x,y,"0X00");
draw_letter(x+5,y,"0X08");
draw_letter(x+10,y,"0X36");
draw_letter(x+15,y,"0X41");
draw_letter(x+20,y,"0X00");
}



static void draw_curlycloseBrace(int x,int y)
{
//   0x00, 0x41, 0x36, 0x08, 0x00,// }
draw_letter(x,y,"0X00");
draw_letter(x+5,y,"0X41");
draw_letter(x+10,y,"0X36");
draw_letter(x+15,y,"0X08");
draw_letter(x+20,y,"0X00");
}



static void draw_straightline(int x,int y)
{
//     0x00, 0x00, 0x7F, 0x00, 0x00,// |
draw_letter(x,y,"0X00");
draw_letter(x+5,y,"0X00");
draw_letter(x+10,y,"0X7F");
draw_letter(x+15,y,"0X00");
draw_letter(x+20,y,"0X00");
}


static void draw_exclamation(int x,int y)
{
//     0x00, 0x00, 0x5F, 0x00, 0x00,// !
draw_letter(x,y,"0X00");
draw_letter(x+5,y,"0X00");
draw_letter(x+10,y,"0X5F");
draw_letter(x+15,y,"0X00");
draw_letter(x+20,y,"0X00");
}



static void draw_quote(int x,int y)
{
//      0x00, 0x07, 0x00, 0x07, 0x00,// "
draw_letter(x,y,"0X00");
draw_letter(x+5,y,"0X07");
draw_letter(x+10,y,"0X00");
draw_letter(x+15,y,"0X07");
draw_letter(x+20,y,"0X00");
}



static void draw_hash(int x,int y)
{
//      0x14, 0x7F, 0x14, 0x7F, 0x14,// #
draw_letter(x,y,"0X14");
draw_letter(x+5,y,"0X7F");
draw_letter(x+10,y,"0X14");
draw_letter(x+15,y,"0X7F");
draw_letter(x+20,y,"0X14");
}



static void draw_dollar(int x,int y)
{
//    0x24, 0x2A, 0x7F, 0x2A, 0x12,// $
draw_letter(x,y,"0X24");
draw_letter(x+5,y,"0X2A");
draw_letter(x+10,y,"0X7F");
draw_letter(x+15,y,"0X2A");
draw_letter(x+20,y,"0X12");
}



static void draw_percentage(int x,int y)
{
//  0x23, 0x13, 0x08, 0x64, 0x62,// %
draw_letter(x,y,"0X23");
draw_letter(x+5,y,"0X13");
draw_letter(x+10,y,"0X08");
draw_letter(x+15,y,"0X64");
draw_letter(x+20,y,"0X62");
}





static void draw_and(int x,int y)
{
//  0x36, 0x49, 0x55, 0x22, 0x50,// &
draw_letter(x,y,"0X36");
draw_letter(x+5,y,"0X49");
draw_letter(x+10,y,"0X55");
draw_letter(x+15,y,"0X22");
draw_letter(x+20,y,"0X50");
}


static void draw_singlequote(int x,int y)
{
//   0x00, 0x05, 0x03, 0x00, 0x00,// '
draw_letter(x,y,"0X00");
draw_letter(x+5,y,"0X05");
draw_letter(x+10,y,"0X03");
draw_letter(x+15,y,"0X00");
draw_letter(x+20,y,"0X00");
}
	

static void draw_openbrace(int x,int y)
{
//    0x00, 0x1C, 0x22, 0x41, 0x00,// (
draw_letter(x,y,"0X00");
draw_letter(x+5,y,"0X1C");
draw_letter(x+10,y,"0X22");
draw_letter(x+15,y,"0X41");
draw_letter(x+20,y,"0X00");
}
	


static void draw_closebrace(int x,int y)
{
//    0x00, 0x41, 0x22, 0x1C, 0x00,// )
draw_letter(x,y,"0X00");
draw_letter(x+5,y,"0X41");
draw_letter(x+10,y,"0X22");
draw_letter(x+15,y,"0X1C");
draw_letter(x+20,y,"0X00");
}
	


static void draw_star(int x,int y)
{
//    0x08, 0x2A, 0x1C, 0x2A, 0x08,// *
draw_letter(x,y,"0X08");
draw_letter(x+5,y,"0X2A");
draw_letter(x+10,y,"0X1C");
draw_letter(x+15,y,"0X2A");
draw_letter(x+20,y,"0X08");
}
	


static void draw_plus(int x,int y)
{
//    0x08, 0x08, 0x3E, 0x08, 0x08,// +
draw_letter(x,y,"0X08");
draw_letter(x+5,y,"0X08");
draw_letter(x+10,y,"0X3E");
draw_letter(x+15,y,"0X08");
draw_letter(x+20,y,"0X08");
}


static void draw_minus(int x,int y)
{
//    0x08, 0x08, 0x08, 0x08, 0x08,// -
draw_letter(x,y,"0X08");
draw_letter(x+5,y,"0X08");
draw_letter(x+10,y,"0X08");
draw_letter(x+15,y,"0X08");
draw_letter(x+20,y,"0X08");
}



static void draw_dot(int x,int y)
{
//    0x00, 0x60, 0x60, 0x00, 0x00,// .
draw_letter(x,y,"0X00");
draw_letter(x+5,y,"0X60");
draw_letter(x+10,y,"0X60");
draw_letter(x+15,y,"0X00");
draw_letter(x+20,y,"0X00");
}



static void draw_slash(int x,int y)
{
//    0x20, 0x10, 0x08, 0x04, 0x02,// /
draw_letter(x,y,"0X20");
draw_letter(x+5,y,"0X10");
draw_letter(x+10,y,"0X08");
draw_letter(x+15,y,"0X04");
draw_letter(x+20,y,"0X02");
}


	
static void draw_0(int x,int y)
{
//     0x3E, 0x51, 0x49, 0x45, 0x3E,// 0
draw_letter(x,y,"0X3E");
draw_letter(x+5,y,"0X51");
draw_letter(x+10,y,"0X49");
draw_letter(x+15,y,"0X45");
draw_letter(x+20,y,"0X3E");
}




static void draw_1(int x,int y)
{
//    0x00, 0x42, 0x7F, 0x40, 0x00,// 1
draw_letter(x,y,"0X00");
draw_letter(x+5,y,"0X42");
draw_letter(x+10,y,"0X7F");
draw_letter(x+15,y,"0X40");
draw_letter(x+20,y,"0X00");
}


static void draw_2(int x,int y)
{
//    0x42, 0x61, 0x51, 0x49, 0x46,// 2
draw_letter(x,y,"0X42");
draw_letter(x+5,y,"0X61");
draw_letter(x+10,y,"0X51");
draw_letter(x+15,y,"0X49");
draw_letter(x+20,y,"0X46");
}



static void draw_3(int x,int y)
{
//    0x21, 0x41, 0x45, 0x4B, 0x31,// 3
draw_letter(x,y,"0X21");
draw_letter(x+5,y,"0X41");
draw_letter(x+10,y,"0X45");
draw_letter(x+15,y,"0X4B");
draw_letter(x+20,y,"0X31");
}


static void draw_4(int x,int y)
{
//    0x18, 0x14, 0x12, 0x7F, 0x10,// 4
draw_letter(x,y,"0X18");
draw_letter(x+5,y,"0X14");
draw_letter(x+10,y,"0X12");
draw_letter(x+15,y,"0X7F");
draw_letter(x+20,y,"0X10");
}


static void draw_5(int x,int y)
{
//      0x27, 0x45, 0x45, 0x45, 0x39,// 5
draw_letter(x,y,"0X27");
draw_letter(x+5,y,"0X45");
draw_letter(x+10,y,"0X45");
draw_letter(x+15,y,"0X45");
draw_letter(x+20,y,"0X39");
}


static void draw_6(int x,int y)
{
//       0x3C, 0x4A, 0x49, 0x49, 0x30,// 6
draw_letter(x,y,"0X3C");
draw_letter(x+5,y,"0X4A");
draw_letter(x+10,y,"0X49");
draw_letter(x+15,y,"0X49");
draw_letter(x+20,y,"0X30");
}


static void draw_7(int x,int y)
{
//     0x01, 0x71, 0x09, 0x05, 0x03,// 7
draw_letter(x,y,"0X01");
draw_letter(x+5,y,"0X71");
draw_letter(x+10,y,"0X09");
draw_letter(x+15,y,"0X05");
draw_letter(x+20,y,"0X03");
}


static void draw_8(int x,int y)
{
//    0x36, 0x49, 0x49, 0x49, 0x36,// 8
draw_letter(x,y,"0X36");
draw_letter(x+5,y,"0X49");
draw_letter(x+10,y,"0X49");
draw_letter(x+15,y,"0X49");
draw_letter(x+20,y,"0X36");
}


static void draw_9(int x,int y)
{
//    0x06, 0x49, 0x49, 0x29, 0x1E,// 9
draw_letter(x,y,"0X06");
draw_letter(x+5,y,"0X49");
draw_letter(x+10,y,"0X49");
draw_letter(x+15,y,"0X29");
draw_letter(x+20,y,"0X1E");
}


static void draw_equals(int x,int y)
{
//   0x14, 0x14, 0x14, 0x14, 0x14,// =
draw_letter(x,y,"0X14");
draw_letter(x+5,y,"0X14");
draw_letter(x+10,y,"0X14");
draw_letter(x+15,y,"0X14");
draw_letter(x+20,y,"0X14");
}



static void draw_question(int x,int y)
{
//   0x02, 0x01, 0x51, 0x09, 0x06,// ?
draw_letter(x,y,"0X02");
draw_letter(x+5,y,"0X01");
draw_letter(x+10,y,"0X51");
draw_letter(x+15,y,"0X09");
draw_letter(x+20,y,"0X06");
}


static void draw_attherate(int x,int y)
{
//  0x32, 0x49, 0x79, 0x41, 0x3E,// @
draw_letter(x,y,"0X32");
draw_letter(x+5,y,"0X49");
draw_letter(x+10,y,"0X79");
draw_letter(x+15,y,"0X41");
draw_letter(x+20,y,"0X3E");
}

///////////////////////













////////////////////



public static void TFTWriteChar(int x,int y,String tftword)
{
	 switch(tftword)
	    {


	         case "!":
	        	 draw_exclamation(x,y);
	        
	         break;
	         
	         
	         case ".":
	        	 draw_dot(x,y);
	        
	         break;
	         
	         
	         
	         case "#":
	        	 draw_hash(x,y);
	        
	         break;
	         
	         
	         case "$":
	        	 draw_dollar(x,y);
	        
	         break;
	         
	         case "%":
	        	 draw_percentage(x,y);
	        
	         break;
	         
	         case "&":
	        	 draw_and(x,y);
	        
	         break;
	         
	         case "(":
	        	 draw_openbrace(x,y);
	        
	         break;
	         
	         
	         
	         case ")":
	        	 draw_closebrace(x,y);
	        
	         break;
	         
	         
	         case "*":
	        	 draw_star(x,y);
	        
	         break;
	         
	         
	         case "+":
	        	 draw_plus(x,y);
	        
	         break;
	         
	         
	         
	         case "-":
	        	 draw_minus(x,y);
	        
	         break;
	         
	         case "/":
	        	 draw_slash(x,y);
	        
	         break;
	         
	         
	         
	         case "=":
	        	 draw_equals(x,y);
	        
	         break;
	         
	         
	         case "?":
	        	 draw_question(x,y);
	        
	         break;
	         
	         case "@":
	        	 draw_attherate(x,y);
	        
	         break;
	         
	         
	         case "0":
	        	 draw_0(x,y);
	        
	         break;
	         
	         case "1":
	        	 draw_1(x,y);
	        
	         break;
	         
	         case "2":
	        	 draw_2(x,y);
	        
	         break;
	         
	         case "3":
	        	 draw_3(x,y);
	        
	         break;
	         
	         case "4":
	        	 draw_4(x,y);
	        
	         break;
	         
	         case "5":
	        	 draw_5(x,y);
	        
	         break;
	         
	         case "6":
	        	 draw_6(x,y);
	        
	         break;
	         
	         case "7":
	        	 draw_7(x,y);
	        
	         break;
	         
	         case "8":
	        	 draw_8(x,y);
	        
	         break;
	         
	         
	         case "9":
	        	 draw_9(x,y);
	        
	         break;
	         
	         case "A":
	        	 draw_A(x,y);
	        
	         break;
	         
	         
	         case "B":
	        	 draw_B(x,y);
	        
	         break;
	         
	         
	         case "C":
	        	 draw_C(x,y);
	        
	         break;
	         
	         
	         case "D":
	        	 draw_D(x,y);
	        
	         break;
	         
	         case "E":
	        	 draw_E(x,y);
	        
	         break;
	         
	         
	         
	         case "F":
	        	 draw_F(x,y);
	        
	         break;
	         
	         
	         
	         case "G":
	        	 draw_G(x,y);
	        
	         break;
	         
	         
	         case "H":
	        	 draw_H(x,y);
	        
	         break;
	         
	         
	         
	         case "I":
	        	 draw_I(x,y);
	        
	         break;
	         
	         
	         
	         case "J":
	        	 draw_J(x,y);
	        
	         break;
	         
	         
	         
	         case "K":
	        	 draw_K(x,y);
	        
	         break;
	         
	         
	         case "L":
	        	 draw_L(x,y);
	        
	         break;
	         
	         
	         case "M":
	        	 draw_M(x,y);
	        
	         break;
	         
	         
	         case "N":
	        	 draw_N(x,y);
	        
	         break;
	         
	         
	         case "O":
	        	 draw_O(x,y);
	        
	         break;
	         
	         
	         case "P":
	        	 draw_P(x,y);
	        
	         break;
	         
	         
	         case "Q":
	        	 draw_Q(x,y);
	        
	         break;
	         
	         
	         case "R":
	        	 draw_R(x,y);
	        
	         break;
	         
	         
	         case "S":
	        	 draw_S(x,y);
	        
	         break;
	         
	         
	         case "T":
	        	 draw_T(x,y);
	        
	         break;
	         
	         
	         case "U":
	        	 draw_U(x,y);
	        
	         break;
	         
	         case "V":
	        	 draw_V(x,y);
	        
	         break;
	         
	         
	         case "W":
	        	 draw_W(x,y);
	        
	         break;
	         
	         
	         case "X":
	        	 draw_X(x,y);
	        
	         break;
	         
	         
	         case "Y":
	        	 draw_Y(x,y);
	        
	         break;
	         
	         
	         case "Z":
	        	 draw_Z(x,y);
	        
	         break;
	         
	         
	         case "a":
	        	 draw_a(x,y);
	        
	         break;
	         
	         
	         case "b":
	        	 draw_b(x,y);
	        
	         break;
	         
	         
	         case "c":
	        	 draw_c(x,y);
	        
	         break;
	         
	         
	         
	         case "d":
	        	 draw_d(x,y);
	        
	         break;
	         
	         
	         
	         
	         case "e":
	        	 draw_e(x,y);
	        
	         break;
	         
	         
	         
	         case "f":
	        	 draw_f(x,y);
	        
	         break;
	         
	         
	         
	         case "g":
	        	 draw_g(x,y);
	        
	         break;
	         
	         
	         
	         case "h":
	        	 draw_h(x,y);
	        
	         break;
	         
	         
	         
	         case "i":
	        	 draw_i(x,y);
	        
	         break;
	         
	         
	         case "j":
	        	 draw_j(x,y);
	        
	         break;
	         
	         
	         case "k":
	        	 draw_k(x,y);
	        
	         break;
	         
	         
	         
	         case "l":
	        	 draw_l(x,y);
	        
	         break;
	         
	         
	         
	         case "m":
	        	 draw_m(x,y);
	        
	         break;
	         
	         
	         
	         case "n":
	        	 draw_n(x,y);
	        
	         break;
	         
	         
	         case "o":
	        	 draw_o(x,y);
	        
	         break;
	         
	         
	         
	         case "p":
	        	 draw_p(x,y);
	        
	         break;
	         
	         
	         case "q":
	        	 draw_q(x,y);
	        
	         break;
	         
	         
	         case "r":
	        	 draw_r(x,y);
	        
	         break;
	         
	         
	         
	         case "s":
	        	 draw_s(x,y);
	        
	         break;
	         
	         
	         
	         case "t":
	        	 draw_t(x,y);
	        
	         break;
	         
	         
	         case "u":
	        	 draw_u(x,y);
	        
	         break;
	         
	         
	         case "v":
	        	 draw_v(x,y);
	        
	         break;
	         
	         
	         
	         case "w":
	        	 draw_w(x,y);
	        
	         break;
	         
	         
	         
	         case "x":
	        	 draw_x(x,y);
	        
	         break;
	         
	         
	         case "y":
	        	 draw_y(x,y);
	        
	         break;
	         
	         
	         
	         case "z":
	        	 draw_z(x,y);
	        
	         break;
	         
	         
	         
	         
	         
	    }    


}









public static void TFTWriteString(int x,int y,String characters)
{

	
	for(int k=0;k<characters.length();k++)
	{
		
		
	    
		TFTWriteChar(x,y,characters.substring(k, k+1));
	     x=x+30;
	}
	
}






static void DateDemo()


{

	  
	      Date dNow = new Date( );
	      SimpleDateFormat ft = new SimpleDateFormat ("E yyyy M dd 'at' hh:mm a zzz");

	      System.out.println("Current Date: " + ft.format(dNow)) ;
	      
	      String finaldate= ft.format(dNow);
	      
	      String modifieddate =finaldate;
	      
	      System.out.println(modifieddate) ;
	      
	      
	       day = modifieddate.substring(0,3);
	      System.out.println(day) ;
	      
	      
	      
	      year = modifieddate.substring(4,8);
	      System.out.println(year) ;
	      
	      month = modifieddate.substring(9,10);
	      System.out.println(month) ;
	      
	     
	       date = modifieddate.substring(11,13);
	      System.out.println(date) ;
	      
	      
	      
	       hour = modifieddate.substring(17,19);
	      System.out.println(hour) ;
	      
	      
	      
	       min = modifieddate.substring(20,22);
	      System.out.println(min) ;
	      
	      
	      
	      
	       amorpm = modifieddate.substring(23,25);
	      System.out.println(amorpm) ;
	      
	      
	   
	}





static void readFile()

{
	
	
	
	
	String line = "";  
	StringBuilder linebuilder= new StringBuilder() ;
	String splitBy = ",";  
	String employee = null;
	try   
	{  
	
  BufferedReader br = new BufferedReader(new FileReader("/home/pi/Desktop/jarfiles/bird.csv")); 	
		
		
	int k=0;
	
	while ((line = br.readLine()) != null) 
	  {  
		
	
		linebuilder.append(line);
		
	 
	 
	 
	
		
    	
	
	   }  
	
	
	   
	System.out.println("final string");
	
	 
	System.out.println("split string");
	
	
	String image = linebuilder.toString();
	
	String[] imagenew = (image.split(",")); 
	
	 
	 
	 System.out.println(imagenew[36]);
	
	 
	 int value = Integer.parseInt((imagenew[35]));
	 System.out.println(value);
	 
	 
	 double doublevalue = Double.parseDouble(imagenew[35]);
	 System.out.println(doublevalue);
	 
	
	  System.out.println("another ");
	   
	  int kk=0;
	 
	   for(int j=0;j<479;j++)
	   {
		   
		   for(int i=0;i<320;i++)
		   {
			   
			  
			   drawPixelnew(i,j,Double.parseDouble(imagenew[kk]));			   
			   
			   kk++;
			   
		   }
		   
		   
	   }
	
	
	
	
	
	}   
	catch (IOException e)   
	{  
	e.printStackTrace();  
	}  

	
	

}











public static void main(String[] args) 


{
	
	
	
	System.out.println("tft ");
	begin_new(38022); //0x9486 respresents ILI9486 controller
	
	
	
	
	readFile();
	readfromnet();
	DateDemo();
	
	
	
	
	TFTWriteString(0,20,hour); //(x coordinate,y coordinate ,"String ")
	
	
	
	TFTWriteString(70,20,min);
	
	TFTWriteString(140,20,amorpm);
	
	TFTWriteString(0,80,date);
	
	
	TFTWriteString(80,80,month);
	
	
	TFTWriteString(120,80,year);
	
	
	
	TFTWriteString(10,150,finaltemp);
	TFTWriteString(10,220,finalhumidity);
	TFTWriteString(10,290,desc);
	
	
	
	
	
	while(true)
	{
		
		 try {
				TimeUnit.MICROSECONDS.sleep(30000000); //delay of 30secs
				DateDemo();
				
	 			
				 int kk=0;
				 
				   for(int j=20;j<55;j++)
				   {
					   
					   for(int i=70;i<130;i++)
					   {
						   
						  
						   
						   drawPixel(i,j,drawmins[kk]); //it draws drawmins[] array	for clearing that part on image		   
						   
						   kk++;
						   
					   }
					   
					   
				   }
				   
				   
				   
				
				
				
				
				   TFTWriteString(70,20,min);	
				   
				   
				   
				   
				   
				   if(min.equals("59"))
				   {
					   
					   int mm=0;
						 
					   for(int j=20;j<55;j++)
					   {
						   
						   for(int i=0;i<58;i++)
						   {
							   
							  
							   
							   drawPixel(i,j,drawhours[mm]);			   
							   
							   mm++;
							   
						   }
						   
						   
					   }
					   
					   TFTWriteString(0,20,hour);
					   TimeUnit.MICROSECONDS.sleep(60000000);  //delay of 60 secs
					  
					   
					   
					   
				   }
				   
				   
				   
				
				
				
				if( hour.equals("11") && (min.equals("59")))
				{
					
					flagset=true;
					readFile();
					readfromnet();
					DateDemo();
	                
					

					TFTWriteString(0,20,hour);
					
					
					
					TFTWriteString(70,20,min);
					
					TFTWriteString(140,20,amorpm);
					
					TFTWriteString(0,80,date);
					
					
					TFTWriteString(80,80,month);
					
					
					TFTWriteString(120,80,year);
					
					
					
					TFTWriteString(10,150,finaltemp);
					TFTWriteString(10,220,finalhumidity);
					TFTWriteString(10,290,desc);
					
					
					flagset=false;
					
				}
				
				
				
			} 
		 
		    catch (InterruptedException e) 
		 
		 
		    {
				
				e.printStackTrace();
			}
		
		
	}
	
	

	
}






   

	
}
